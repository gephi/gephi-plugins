package net.clementlevallois.excelcsvimporter.wizard;

import java.awt.Font;
import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.clementlevallois.excelcsvimporter.controller.MyFileImporter;
import net.clementlevallois.excelcsvimporter.parsers.ExcelParser;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openide.util.Exceptions;

/**
 *
 * @author C. Levallois
 */
public class Panel1 extends javax.swing.JPanel {

    File f;
    String workingDirectory;
    private String fileSelectedPathANdName;
    public static String fileSelectedName;
    private String[] headers;
    public static String selectedFileDelimiter;
    public static String selectedSheet;
    public static ExcelParser excelParserTest;

    public Panel1() {
        initComponents();
        jLabelFieldDelimiter.setVisible(false);
        jLabel2.setVisible(false);
        jListFieldDelimiter.setVisible(false);
        jScrollPane1.setVisible(false);
        jTextFieldTextDelimiter.setVisible(false);

        jListExcelSheets.setVisible(false);
        jScrollPaneExcelSheets.setVisible(false);
        jLabelExcelSheets.setVisible(false);

        jListFieldDelimiter.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selectedFileDelimiter = (String) ((JList) e.getSource()).getSelectedValue();
                Font font = new Font("Tahoma", Font.PLAIN, 11);
                Panel1.jLabelFieldDelimiter.setFont(font);

            }
        });

        jListExcelSheets.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selectedSheet = (String) ((JList) e.getSource()).getSelectedValue();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelectFile = new javax.swing.JButton();
        jLabelFieldDelimiter = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTextDelimiter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFieldDelimiter = new javax.swing.JList();
        jCheckBoxHeadersIncluded = new javax.swing.JCheckBox();
        jLabelExcelSheets = new javax.swing.JLabel();
        jScrollPaneExcelSheets = new javax.swing.JScrollPane();
        jListExcelSheets = new javax.swing.JList();

        org.openide.awt.Mnemonics.setLocalizedText(jButtonSelectFile, org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jButtonSelectFile.text")); // NOI18N
        jButtonSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFileActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabelFieldDelimiter, org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jLabelFieldDelimiter.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jLabel2.text")); // NOI18N

        jTextFieldTextDelimiter.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jTextFieldTextDelimiter.text")); // NOI18N

        jListFieldDelimiter.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "comma", "semicolon", "tab", "|" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListFieldDelimiter.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFieldDelimiter.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFieldDelimiterValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListFieldDelimiter);

        jCheckBoxHeadersIncluded.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxHeadersIncluded, org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jCheckBoxHeadersIncluded.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelExcelSheets, org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jLabelExcelSheets.text")); // NOI18N

        jListExcelSheets.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListExcelSheets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneExcelSheets.setViewportView(jListExcelSheets);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxHeadersIncluded)
                            .addComponent(jButtonSelectFile)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelExcelSheets)
                                    .addComponent(jLabelFieldDelimiter))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPaneExcelSheets, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(20, 20, 20)))
                .addComponent(jTextFieldTextDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButtonSelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxHeadersIncluded)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPaneExcelSheets, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabelExcelSheets)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelFieldDelimiter)
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTextDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectFileActionPerformed
        excelParserTest = new ExcelParser();
        excelParserTest.testDynamics();
        try {
            f = new File(new File(".").getCanonicalPath());
            JFileChooser chooser = new JFileChooser();

            chooser.setCurrentDirectory(f);
            //chooser.setCurrentDirectory(new java.io.File("D:\\Docs Pro Clement\\E-humanities\\TextMining\\Exported Items\\"));
            chooser.setDialogTitle("Select a file");
            //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                System.out.println("Current directory: " + chooser.getCurrentDirectory().getAbsolutePath());

                workingDirectory = chooser.getCurrentDirectory().getAbsolutePath();
                fileSelectedPathANdName = chooser.getSelectedFile().toString();
                fileSelectedName = chooser.getSelectedFile().getName();
                System.out.println("Selected File: " + fileSelectedPathANdName);
                MyFileImporter.setFilePath(fileSelectedPathANdName);
            }
            if (fileSelectedName == null) {
                System.out.println("no file selected!");
            } else if (fileSelectedName.endsWith("xls")) {
                System.out.println("wrong Excel format selected");
            } else if (!fileSelectedName.endsWith("xlsx")) {
                jLabelFieldDelimiter.setVisible(true);
                jLabel2.setVisible(true);
                jListFieldDelimiter.setVisible(true);
                jScrollPane1.setVisible(true);
                jTextFieldTextDelimiter.setVisible(true);
                jListExcelSheets.setVisible(false);
                jScrollPaneExcelSheets.setVisible(false);
                jLabelExcelSheets.setVisible(false);

            } else {
                ExcelParser excelParser = new ExcelParser(fileSelectedPathANdName);
                String[] sheetsNames = excelParser.getSheetsNames();

                DefaultListModel listModel = new DefaultListModel();
                for (String string : sheetsNames) {
                    listModel.addElement(string);
                }
                jListExcelSheets.setModel(listModel);
                jListExcelSheets.setSelectedIndex(0);
                jListExcelSheets.setVisible(true);
                jScrollPaneExcelSheets.setVisible(true);
                jLabelExcelSheets.setVisible(true);

                jLabelFieldDelimiter.setVisible(false);
                jLabel2.setVisible(false);
                jListFieldDelimiter.setVisible(false);
                jScrollPane1.setVisible(false);
                jTextFieldTextDelimiter.setVisible(false);

            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);

        } catch (InvalidFormatException ex) {
            Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_jButtonSelectFileActionPerformed

    private void jListFieldDelimiterValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFieldDelimiterValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jListFieldDelimiterValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelectFile;
    public static javax.swing.JCheckBox jCheckBoxHeadersIncluded;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelExcelSheets;
    public static javax.swing.JLabel jLabelFieldDelimiter;
    private javax.swing.JList jListExcelSheets;
    public static javax.swing.JList jListFieldDelimiter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneExcelSheets;
    public static javax.swing.JTextField jTextFieldTextDelimiter;
    // End of variables declaration//GEN-END:variables

    public void unsetup(MyFileImporter importer) {
        //Configure the importer
        //Example
        //importer.setOption(optionCheckbox.isSelected());
    }

    @Override
    public String getName() {
        return "Select Excel or csv file";   //this will be the title of the panel in the wizard
    }

    public String[] getHeaders() {
        return headers;
    }
}
