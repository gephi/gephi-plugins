package uk.co.oracletroubadour.gephi.plugins;

import org.gephi.io.database.drivers.*;
import org.openide.util.lookup.ServiceProvider;

import java.io.File;
import java.io.FilenameFilter;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;

import java.util.*;
import java.util.logging.*;

/**
 *
 * @author Stuart Turton
 */
@ServiceProvider(service = SQLDriver.class)
public class OracleDriver implements SQLDriver {

    /**
     * An Oracle JDBC thin driver SQLDriver implementation for GEPHI.
     *
     * @see org.gephi.io.database.drivers.SQLDriver
     */
    private static final String CLASS_NAME = OracleDriver.class.getName();
    private static final String JDBC_PATH = "JDBC_PATH";
    private static final String ORACLE_HOME = "ORACLE_HOME";
    private static final String JDBC_DRIVER_NAME = "oracle.jdbc.OracleDriver";

    private static final Logger logger = Logger.getLogger(CLASS_NAME);

    /* Is the Oracle JDBC driver already registered?
     *
     * <p>Registration is required only once - delayed regiatration ensures that missing classes cause errors only when 
     * attempting a Connection. 
     */
    private static JDBCUtils jdbcUtils = new JDBCUtils();

    private static boolean isRegistered;
    private static Driver driver;

    /**
     * Identify Oracle JDBC jar files - all versions later than Java 1.2 have the format ojdbc{n}.jar.
     */
    private static final FilenameFilter FILENAME_FILTER = new FilenameFilter() {

        @Override
        public boolean accept(File dir, String name) {
            String localName;

            //If this is Windows coerce the file name to lower case 
            if (';' == File.pathSeparatorChar) {
                localName = name.toLowerCase();
            } else {
                localName = name;
            }

            return (localName.startsWith("ojdbc") && localName.endsWith(".jar"));
        }
    };

    /**
     * Take generic Gephi JDBC URL, user name and password and return a Connection to an Oracle database.
     *
     * <p>
     * This is the format produced by SQLUtils.getURL():- jdbc:${Prefix}://${Host}:${Port}/${DBName}</p>
     *
     * <p>
     * This is one of the formats that Oracle can use:- jdbc:oracle:thin:@//${Host}:${Port}/${ServiceName}</p>
     *
     * <p>
     * With prefix "oracle:thin:@" this URL is passed in:  <code>jdbc:oracle:thin:<b>@:</b>//192.168.100.158:1521/XE</code></p>
     *
     * <p>
     * <u>In order to get the correct URL format this method needs to rewrite "@:" to "@"</u>.</p>
     *
     *
     * @param connectionUrl JDBC URL in the format generated by SQLUtils.getURL() (jdbc:${Prefix}://${Host}:${Port}/${DBName})
     * @param username username in clear text
     * @param passwd password in clear text
     */
    @Override
    public Connection getConnection(String connectionUrl, String username, String passwd) throws SQLException {
        /*
         * Rewrite the generic URL to a valid Oracle format 
         */
        String rewrittenURL = connectionUrl.replace("@:", "@");

        Properties info = new Properties();
        info.put("user", username);
        info.put("password", passwd);

        try {
            // Register the JDBC Driver before attempting to return the Connection  
            if (!isRegistered) {
                try {
                    registerDriver();
                } catch (Exception e) {
                    logger.log(Level.SEVERE, e.getMessage(), e);
                    logger.warning("Failed to register JDBC driver");
                }
                isRegistered = true;
            }

            return driver.connect(rewrittenURL, info);
        } catch (SQLException sqlE) {
            logger.log(Level.SEVERE, "(connectionUrl, username, passwd)=(" + rewrittenURL + "," + username + "," + passwd + ")", sqlE);
            throw (sqlE);
        }
    }

    @Override
    public String getPrefix() {
        return "oracle:thin:@";
    }

    @Override
    public String toString() {
        return "Oracle";
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof OracleDriver) {
            return ((OracleDriver) obj).getPrefix().equals(getPrefix());
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrefix().hashCode();
    }

    /**
     */
    private void registerDriver() throws Exception {
        //Generate a list of possible OJDBC files 
        List<String> pathList = new ArrayList<String>();

        try {
            if (System.getenv(JDBC_PATH) != null && !System.getenv(JDBC_PATH).isEmpty()) {
                logger.info("Adding JDBC_PATH");
                pathList.add(System.getenv(JDBC_PATH));
            }

            // Add any Oracle JDBC files under Oracle Home 
            if (System.getenv(ORACLE_HOME) != null && !System.getenv(ORACLE_HOME).isEmpty()) {
                File oracleHome = new File(System.getenv(ORACLE_HOME));

                if (oracleHome.exists() && oracleHome.isDirectory()) {
                    logger.info("Oracle Home exists");
                    // InstantClient - JAR files are in $ORACLE_HOME
                    for (File ojdbcFile : oracleHome.listFiles(FILENAME_FILTER)) {
                        logger.log(Level.INFO, "Adding Instant Client JDBC file {0}", ojdbcFile.getCanonicalPath());
                        pathList.add(ojdbcFile.getCanonicalPath());
                    }

                    // Normal Client - JAR files are in $ORACLE_HOME/jdbc/lib 
                    File jdbcDirectory = new File(oracleHome, "jdbc/lib");
                    if (jdbcDirectory.exists()) {
                        logger.info("Oracle Client JDBC library exists");
                        for (File ojdbcFile : jdbcDirectory.listFiles(FILENAME_FILTER)) {
                            logger.log(Level.INFO, "Adding Oracle Client JDBC file{0}", ojdbcFile.getCanonicalPath());
                            pathList.add(ojdbcFile.getCanonicalPath());
                        }
                    }
                }
            }

            //jdbcUtils.registerDriver(JDBC_DRIVER_NAME, pathList ); 
            driver = jdbcUtils.getDriver(JDBC_DRIVER_NAME, pathList);
            DriverManager.registerDriver(driver);
        } catch (Exception e) {
            logger.throwing(CLASS_NAME, "registerDriver", e);
            throw e;
        }
    }

}
