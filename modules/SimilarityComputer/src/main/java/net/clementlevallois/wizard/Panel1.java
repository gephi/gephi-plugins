package net.clementlevallois.wizard;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.clementlevallois.parsers.ExcelParser;
import net.clementlevallois.controller.SimilarityComputerImporter;
import java.awt.Font;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import net.clementlevallois.utils.Utils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openide.util.Exceptions;

/*
 Copyright 2008-2013 Clement Levallois
 Authors : Clement Levallois <clementlevallois@gmail.com>
 Website : http://www.clementlevallois.net


 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

 Copyright 2013 Clement Levallois. All rights reserved.

 The contents of this file are subject to the terms of either the GNU
 General Public License Version 3 only ("GPL") or the Common
 Development and Distribution License("CDDL") (collectively, the
 "License"). You may not use this file except in compliance with the
 License. You can obtain a copy of the License at
 http://gephi.org/about/legal/license-notice/
 or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the
 specific language governing permissions and limitations under the
 License.  When distributing the software, include this License Header
 Notice in each file and include the License files at
 /cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the
 License Header, with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"

 If you wish your version of this file to be governed by only the CDDL
 or only the GPL Version 3, indicate your decision by adding
 "[Contributor] elects to include this software in this distribution
 under the [CDDL or GPL Version 3] license." If you do not indicate a
 single choice of license, a recipient has the option to distribute
 your version of this file under either the CDDL, the GPL Version 3 or
 to extend the choice of license to its licensees as provided above.
 However, if you add GPL Version 3 code and therefore, elected the GPL
 Version 3 license, then the option applies only if the new code is
 made subject to such option by the copyright holder.

 Contributor(s): Clement Levallois

 */
public class Panel1 extends javax.swing.JPanel {

    private String selectedFileName;
    private String selectedFileAndPath;
    private String selectedFieldDelimiter = ",";
    private String selectedTextDelimiter = "\"";
    private String selectedSheet;
    private boolean headersPresent = true;

    public Panel1() {
        initComponents();
        jLabelFieldDelimiter.setVisible(false);
        jLabel2.setVisible(false);
        jListFieldDelimiter.setVisible(false);
        jScrollPane1.setVisible(false);
        jTextFieldTextDelimiter.setVisible(false);

        jListExcelSheets.setVisible(false);
        jScrollPaneExcelSheets.setVisible(false);
        jLabelExcelSheets.setVisible(false);

        jListFieldDelimiter.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selectedFieldDelimiter = (String) ((JList) e.getSource()).getSelectedValue();
                Font font = new Font("Tahoma", Font.PLAIN, 11);
                Panel1.jLabelFieldDelimiter.setFont(font);

            }
        });

        jListExcelSheets.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selectedSheet = (String) ((JList) e.getSource()).getSelectedValue();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jButtonSelectFile = new javax.swing.JButton();
        jLabelFieldDelimiter = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTextDelimiter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFieldDelimiter = new javax.swing.JList();
        jCheckBoxHeadersIncluded = new javax.swing.JCheckBox();
        jLabelExcelSheets = new javax.swing.JLabel();
        jScrollPaneExcelSheets = new javax.swing.JScrollPane();
        jListExcelSheets = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("null");

        jButtonSelectFile.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jButtonSelectFile.text")); // NOI18N
        jButtonSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFileActionPerformed(evt);
            }
        });

        jLabelFieldDelimiter.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jLabelFieldDelimiter.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jLabel2.text")); // NOI18N

        jTextFieldTextDelimiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTextDelimiterActionPerformed(evt);
            }
        });

        jListFieldDelimiter.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "comma", "semicolon", "tab", "|" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListFieldDelimiter.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFieldDelimiter.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFieldDelimiterValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListFieldDelimiter);

        jCheckBoxHeadersIncluded.setSelected(true);
        jCheckBoxHeadersIncluded.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jCheckBoxHeadersIncluded.text")); // NOI18N
        jCheckBoxHeadersIncluded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHeadersIncludedActionPerformed(evt);
            }
        });

        jLabelExcelSheets.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jLabelExcelSheets.text")); // NOI18N

        jListExcelSheets.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListExcelSheets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneExcelSheets.setViewportView(jListExcelSheets);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(Panel1.class, "Panel1.jTextArea1.text")); // NOI18N
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldTextDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxHeadersIncluded)
                    .addComponent(jButtonSelectFile)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelExcelSheets)
                            .addComponent(jLabelFieldDelimiter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneExcelSheets, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButtonSelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxHeadersIncluded)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPaneExcelSheets, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabelExcelSheets)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelFieldDelimiter)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTextDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectFileActionPerformed

        try {
            File file = new File(new File(".").getCanonicalPath());
            JFileChooser chooser = new JFileChooser();

            chooser.setCurrentDirectory(file);
            chooser.setDialogTitle("Select a file");
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                Logger.getLogger("").log(Level.INFO, "Current directory: " + chooser.getCurrentDirectory().getAbsolutePath());

                selectedFileAndPath = chooser.getSelectedFile().toString();
                selectedFileName = chooser.getSelectedFile().getName();
                Logger.getLogger("").log(Level.INFO, "Selected File: " + selectedFileAndPath);
            }

            if (selectedFileName == null) {
                Logger.getLogger("").log(Level.WARNING, "no file selected!");
            } else if (selectedFileName.endsWith("xlsx")) {
                ExcelParser excelParser = new ExcelParser(selectedFileAndPath);
                String[] sheetsNames = excelParser.getSheetsNames();

                DefaultListModel listModel = new DefaultListModel();
                for (String string : sheetsNames) {
                    listModel.addElement(string);
                }
                jListExcelSheets.setModel(listModel);
                jListExcelSheets.setSelectedIndex(0);
                jListExcelSheets.setVisible(true);
                jScrollPaneExcelSheets.setVisible(true);
                jLabelExcelSheets.setVisible(true);

                jLabelFieldDelimiter.setVisible(false);
                jLabel2.setVisible(false);
                jListFieldDelimiter.setVisible(false);
                jScrollPane1.setVisible(false);
                jTextFieldTextDelimiter.setVisible(false);

            } else {
                jLabelFieldDelimiter.setVisible(true);
                jLabel2.setVisible(true);
                jListFieldDelimiter.setVisible(true);
                jScrollPane1.setVisible(true);
                jTextFieldTextDelimiter.setVisible(true);
                jListExcelSheets.setVisible(false);
                jScrollPaneExcelSheets.setVisible(false);
                jLabelExcelSheets.setVisible(false);

            }
        } catch (IOException | InvalidFormatException ex) {
            Exceptions.printStackTrace(ex);

        }

    }//GEN-LAST:event_jButtonSelectFileActionPerformed

    private void jListFieldDelimiterValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFieldDelimiterValueChanged
        selectedFieldDelimiter = Utils.getCharacter((String) jListFieldDelimiter.getSelectedValue());
    }//GEN-LAST:event_jListFieldDelimiterValueChanged

    private void jCheckBoxHeadersIncludedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHeadersIncludedActionPerformed
        headersPresent = jCheckBoxHeadersIncluded.isSelected();
    }//GEN-LAST:event_jCheckBoxHeadersIncludedActionPerformed

    private void jTextFieldTextDelimiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTextDelimiterActionPerformed
        if (jTextFieldTextDelimiter.getText() != null && !jTextFieldTextDelimiter.getText().trim().isEmpty()) {
            selectedTextDelimiter = Utils.getCharacter(jTextFieldTextDelimiter.getText());
        }
        if (jTextFieldTextDelimiter.getText() != null && jTextFieldTextDelimiter.getText().trim().isEmpty()) {
            selectedTextDelimiter = Utils.getCharacter("\"");
        }

    }//GEN-LAST:event_jTextFieldTextDelimiterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelectFile;
    public javax.swing.JCheckBox jCheckBoxHeadersIncluded;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelExcelSheets;
    public static javax.swing.JLabel jLabelFieldDelimiter;
    private javax.swing.JList jListExcelSheets;
    public javax.swing.JList jListFieldDelimiter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneExcelSheets;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextField jTextFieldTextDelimiter;
    // End of variables declaration//GEN-END:variables

    public void unsetup(SimilarityComputerImporter importer) {
        //Configure the importer
        //Example
        //importer.setOption(optionCheckbox.isSelected());
    }

    @Override
    public String getName() {
        return "Select a csv or excel file";   //this will be the title of the panel in the wizard
    }

    public String getSelectedFileName() {
        return selectedFileName;
    }

    public String getSelectedFieldDelimiter() {
        return selectedFieldDelimiter;
    }

    public String getSelectedTextDelimiter() {
        return selectedTextDelimiter;
    }

    public String getSelectedSheet() {
        return selectedSheet;
    }

    public boolean isHeadersPresent() {
        return headersPresent;
    }

    public String getSelectedFileAndPath() {
        return selectedFileAndPath;
    }
    
    
}
